# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-go-mod # TODO: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  # networking category
  binaryToDecimal:
    handler: bin/networking/binaryToDecimal
    events:
      - http:
          path: calculation/binary-to-decimal
          method: post
  binaryToHexadecimal:
    handler: bin/networking/binaryToHexadecimal
    events:
      - http:
          path: calculation/binary-to-hexadecimal
          method: post
  decimalToBinary:
    handler: bin/networking/decimalToBinary
    events:
      - http:
          path: calculation/decimal-to-binary
          method: post
  decimalToHexadecimal:
    handler: bin/networking/decimalToHexadecimal
    events:
      - http:
          path: calculation/decimal-to-hexadecimal
          method: post
  hexadecimalToBinary:
    handler: bin/networking/hexadecimalToBinary
    events:
      - http:
          path: calculation/hexadecimal-to-binary
          method: post
  hexadecimalToDecimal:
    handler: bin/networking/hexadecimalToDecimal
    events:
      - http:
          path: calculation/is-prime
          method: post
  # numbers category
  isPrime:
    handler: bin/numbers/isPrime
    events:
      - http:
          path: calculation/is-prime
          method: post
  highestCommonFactor:
    handler: bin/numbers/highestCommonFactor
    events:
      - http:
          path: calculation/highest-common-factor
          method: post
  lowestCommonMultiple:
    handler: bin/numbers/lowestCommonMultiple
    events:
      - http:
          path: calculation/lowest-common-multiple
          method: post
  # percentages category
  changeByPercentage:
    handler: bin/percentages/changeByPercentage
    events:
      - http:
          path: calculation/change-by-percentage
          method: post
  numberFromPercentage:
    handler: bin/percentages/numberFromPercentage
    events:
      - http:
          path: calculation/numbers-from-percentage
          method: post
  percentageChange:
    handler: bin/percentages/percentageChange
    events:
      - http:
          path: calculation/percentage-change
          method: post
  percentageFromNumber:
    handler: bin/percentages/percentageFromNumber
    events:
      - http:
          path: calculation/percentage-from-number
          method: post
  # tsa category
  tsaPythagoreanTheorem:
    handler: bin/tsa/tsaPythagoreanTheorem
    events:
      - http:
          path: calculation/tsa-pythagorean-theorem
          method: post
  tsaCone:
    handler: bin/tsa/tsaCone
    events:
      - http:
          path: calculation/tsa-cone
          method: post
  tsaCube:
    handler: bin/tsa/tsaCube
    events:
      - http:
          path: calculation/tsa-cube
          method: post
  tsaCylinder:
    handler: bin/tsa/tsaCylinder
    events:
      - http:
          path: calculation/tsa-cylinder
          method: post
  tsaRectangularPrism:
    handler: bin/tsa/tsaRectangularPrism
    events:
      - http:
          path: calculation/tsa-rectangularPrism
          method: post
  tsaSphere:
    handler: bin/tsa/tsaSphere
    events:
      - http:
          path: calculation/tsa-sphere
          method: post
  tsaSquareBaseTriangle:
    handler: bin/tsa/tsaSquareBaseTriangle
    events:
      - http:
          path: calculation/tsa-square-base-triangle
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
